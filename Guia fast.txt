======================================
TUTORIAL COMPLETO DE GITHUB
===========================

## 1Ô∏è‚É£ Conceptos B√°sicos

GitHub es una plataforma en la nube que permite alojar y colaborar en proyectos usando Git, un sistema de control de versiones distribuido.
Con Git y GitHub puedes:

* Guardar un historial de todos los cambios de tu proyecto.
* Trabajar en equipo sin perder informaci√≥n.
* Volver a versiones anteriores si algo falla.
* Revisar qui√©n hizo cada cambio y cu√°ndo.

T√©rminos importantes:

* Repositorio (repo): Carpeta que contiene tu proyecto y su historial.
* Commit: Punto de guardado con un mensaje descriptivo.
* Branch (rama): Versi√≥n paralela de tu proyecto para nuevas funciones o pruebas.
* Remote (remoto): Repositorio en GitHub conectado a tu proyecto local.
* Pull Request: Solicitud para fusionar cambios de una rama a otra, com√∫n en trabajo en equipo.

---

## 2Ô∏è‚É£ Instalaci√≥n y Configuraci√≥n

1. Instalar Git: [https://git-scm.com/](https://git-scm.com/)
2. Configurar tu usuario (solo la primera vez):
   git config --global user.name "TuNombre"
   git config --global user.email "[tuemail@ejemplo.com](mailto:tuemail@ejemplo.com)"
3. Ver configuraci√≥n:
   git config --list

---

## 3Ô∏è‚É£ Flujo B√°sico de Trabajo Local

# Inicializar repo en tu carpeta local

git init

# Ver estado de los archivos

git status

# Agregar archivos para preparar commit

git add archivo.txt       # Agrega un archivo espec√≠fico
git add .                 # Agrega todos los archivos modificados

# Crear un commit (guardar cambios)

git commit -m "Mensaje descriptivo"

# Ver historial de commits

git log                   # Lista todos los commits
git log --oneline         # Versi√≥n resumida

# Deshacer cambios no guardados

git restore archivo.txt   # Deshace cambios en un archivo
git restore .             # Deshace todos los cambios no guardados

# Volver a un commit anterior (cuidado, puede perder cambios)

git checkout <commit_id> archivo.txt  # Solo un archivo
git reset --hard <commit_id>          # Todo el repo

---

## 4Ô∏è‚É£ Trabajar con Repositorio Remoto (GitHub)

# Conectar repo local a GitHub

git remote add origin URL_DEL_REPO

# Ver remotos

git remote -v

# Subir cambios al repo remoto

git push -u origin main    # Primera vez en main
git push                   # Para commits siguientes

# Descargar cambios desde remoto

git fetch                  # Trae cambios sin fusionar
git pull                   # Trae y fusiona cambios autom√°ticamente

# Clonar un repo existente

git clone URL_DEL_REPO

# Cambiar URL de un remoto

git remote set-url origin NUEVA_URL

---

## 5Ô∏è‚É£ Ramas (Branches) y Trabajo en Equipo

# Crear y cambiar a una nueva rama

git checkout -b nueva-rama

# Cambiar a otra rama existente

git checkout nombre-rama

# Listar todas las ramas

git branch

# Fusionar cambios de otra rama a la actual

git merge nombre-rama

# Subir rama al remoto

git push origin nombre-rama

# Traer cambios de una rama remota

git pull origin nombre-rama

# Eliminar ramas

git branch -d nombre-rama       # Local
git push origin --delete nombre-rama  # Remoto

---

## 6Ô∏è‚É£ Conflictos y Resoluciones

Cuando dos personas modifican la misma l√≠nea de un archivo:

1. Git marca conflicto al hacer merge o pull.
2. Edita el archivo para elegir qu√© versi√≥n mantener.
3. Marcar como resuelto:
   git add archivo.txt
   git commit -m "Resolviendo conflicto"

# Ver conflictos sin fusionar

git status

---

## 7Ô∏è‚É£ Etiquetas (Tags) y Versiones

# Crear un tag

git tag v1.0

# Crear un tag anotado

git tag -a v1.0 -m "Versi√≥n inicial"

# Subir tags al remoto

git push origin v1.0
git push --tags   # Subir todos los tags

# Ver tags existentes

git tag

---

## 8Ô∏è‚É£ Otras Herramientas √ötiles

# Ignorar archivos (no subir al repo)

Crear archivo .gitignore y a√±adir nombres o patrones de archivos

# Revertir un commit (sin borrar historial)

git revert <commit_id>

# Resetear repo a estado anterior

git reset --hard <commit_id>   # Elimina commits posteriores

# Ver diferencias entre commits o archivos

git diff
git diff archivo.txt

---

## 9Ô∏è‚É£ Buenas Pr√°cticas

‚úÖ Hacer commits peque√±os y claros.
‚úÖ Usar ramas para nuevas funciones o correcciones.
‚úÖ Hacer git pull antes de git push.
‚úÖ Revisar conflictos antes de fusionar ramas.
‚úÖ Mantener .gitignore actualizado.
‚úÖ Escribir mensajes de commit descriptivos.
‚úÖ Usar Pull Requests para revisar cambios en equipo.
‚úÖ Mantener tu rama main limpia, fusionando solo cambios estables.

---

## üîü Pr√≥ximos pasos

* Aprender Pull Requests y revisiones de c√≥digo.
* Usar Issues y Projects para gesti√≥n de tareas.
* Explorar GitHub Actions para automatizaciones.
* Probar GitHub Desktop para interfaz gr√°fica.
* Aprender flujos avanzados: rebase, stash, cherry-pick.
* Explorar GitHub Pages para publicar proyectos est√°ticos.

---

# Fin del tutorial extendido
